use std::{env, error::Error, ffi::{OsStr, OsString}, fs::OpenOptions, io::{self, Write}, process};

mod buf;
use buf::FileBuf;

fn main() {
    let mut args = env::args_os().skip(1);

    // no, I didn't forget how to use a "match" statement.
    // OsStr(ing) implements PartialEq but can't be matched.
    let subcommand = args.next();
    let func = match subcommand.as_ref().and_then(|a| a.to_str()) {
        Some("analyze") => analyze,
        Some("encode") => encode,
        Some("decode") => decode,
        Some("help") => help,
        Some(_) | None => help_err,
    };

    func(args);

    /*process::exit(match func(args) {
        Ok(()) => 0,
        Err(err) => {
            eprintln!("error: {}", err);
            1
        }
    });*/
}

fn analyze(mut args: impl Iterator<Item = OsString>) /*-> Result<(), Box<dyn Error>>*/ {
    let mut symbol_size = 1;
    let mut verbose = false;
    let mut flags = true;

    let mut output = None;
    let mut files: Vec<FileBuf> = Vec::new();
    
    while let Some(arg) = args.next() {
        if flags {
            match arg.to_str() {
                Some("--symbol-size") => {
                    symbol_size = args
                        .next().expect("--symbol-size must have an argument")
                        .to_str().expect("--symbol-size must be a positive integer") // TODO: better error handling
                        .parse().expect("--symbol-size must be a positive integer");
                    continue;
                }
                Some("--help") => {
                    //TODO
                    unimplemented!();
                }
                Some("--verbose") => {
                    verbose = true;
                    continue;
                }
                Some("--") => {
                    flags = false;
                    continue;
                }
                _ => {}
            }
        }

        if output.is_none() {
            if arg == "-" {
                // stdout is default anyway
                continue;
            } else {
                output = Some(OpenOptions::new()
                    .write(true)
                    .open(arg)
                    .expect("could not open output file"))
            }
        } else {
            files.push(
                if arg == "-" {
                    // TODO: stream symbol collection instead of using FileBufs
                    FileBuf::read_to_end(io::stdin().lock())
                } else {
                    FileBuf::new(arg)
                }.expect("could not read input file")
            );
        }
    }

    match output {
        Some(out) => ruffman::analyze(symbol_size, files, out),
        None => ruffman::analyze(symbol_size, files, io::stdout().lock()),
    }
}

fn encode(mut args: impl Iterator<Item = OsString>) {
    
}

fn decode(mut args: impl Iterator<Item = OsString>) {
    
}

fn help(mut args: impl Iterator<Item = OsString>) {
    let arg = args.next();
    eprintln!("usage: ruffman {} [--verbose] [DICTIONARY] [FILE ...]", match arg.as_ref().and_then(|a| a.to_str()) {
        None => "[analyze|encode|decode]",
        Some("analyze") => "analyze [--symbol-size=N]",
        Some("encode") => "encode",
        Some("encode") => "decode",
        Some(_) => panic!(), // TODO
    });

    //0
}

fn help_err(mut args: impl Iterator<Item = OsString>) {
    help(args);

    //2
}
